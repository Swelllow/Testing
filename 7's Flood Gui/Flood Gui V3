repeat wait() until game:IsLoaded() or game.Loaded:wait()
--anticheat bypass all credits to Altlexon
game:GetService("ReplicatedStorage").Remote.ReqCharVars.OnClientInvoke = function()return{}end

-- map list extractor
getgenv().maps = {}
local script = require(game.ReplicatedStorage.SharedModules.FE2Library)
for i,v in pairs(script.getOfficialMapData()) do
	table.insert(maps,v.mapName)
end
wait = task.wait

local clmain = getsenv( game.Players.LocalPlayer.PlayerScripts["CL_MAIN_GameScript"] )
local save = clmain.newAlert
if getgenv().wow and debugmode == false then
	clmain.newAlert('Already Executed!',Color3.new(1,0,0))
    error('Already Executed')
else
    getgenv().wow=''
end
-- TAS file minifier 
-- Starting from this line to ending line code was made by ian
local HttpService = game:GetService("HttpService")
local function round(x)
    local factorOfTen = 10^(3)
    return math.floor(x * factorOfTen + .5) / factorOfTen
end
local function minfile(file)
    local tasFile = HttpService:JSONDecode(file)
    local minTasFile = {}
    for t,data in ipairs(tasFile) do
        local minData = {}
        for key,val in pairs(data) do
            local minVal = nil
            if type(val) == "table" then
                minVal = {}
                for f,x in ipairs(val) do
                    if type(x) == "number" then table.insert(minVal, round(x))
                    else table.insert(minVal, x) end    
                end
            else
                minVal = round(val)
            end
            minData[key] = minVal
        end
        table.insert(minTasFile, minData)
    end
    return HttpService:JSONEncode(minTasFile)
end
-- ending line
local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:wait()
local bb = game:service'VirtualUser'
game:service'Players'.LocalPlayer.Idled:connect(function()
	bb:CaptureController()
	bb:ClickButton2(Vector2.new())
end)
-- new anticheat bypass all credits to altlexon
game.ReplicatedStorage.Remote.ReqCharVars.OnClientInvoke = function()
	return {}
end
getgenv().oof = false
local votemap = game.Players.LocalPlayer.PlayerGui.GameGui.VoteMap
local key = -game:GetService("ReplicatedStorage").Remote.ReqPasskey:InvokeServer()
function vote()
	wait(1)
	game:GetService("ReplicatedStorage").Remote.UpdMapVote:FireServer(key, 8, 0)
	if not game.Workspace.Multiplayer:WaitForChild("NewMap", 7) then
		game:GetService("ReplicatedStorage").Remote.UpdMapVote:FireServer(key, 2, 0)
	end
end
game.Players.PlayerAdded:Connect(function()
	if getgenv().autoleave == true then
		game.Players.LocalPlayer:Kick("Auto-Leave is enabled. So you were kicked because a player joined.")	
	end
end)
--votemap.Changed:Connect(function(change)
	--if change == "Visible" then
		--if votemap.Visible == true and getgenv().oof == true then
		--	print("Voting..")
		--	wait()
			--vote()
		--end
	--end
--end)
print("Loaded!")
local lp = game.Players.LocalPlayer
local UIS = game:GetService("UserInputService")
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local colors = {
    SchemeColor = Color3.fromRGB(0, 100, 255),
    Background = Color3.fromRGB(40, 40, 40),
    Header = Color3.fromRGB(30, 30, 30),
    TextColor = Color3.fromRGB(255, 255, 255),
    ElementColor = Color3.fromRGB(60, 60, 60)
}
local Window = Library.CreateLib("Flood GUI v3", colors)
local a = Window:NewTab("Auto")
local s = Window:NewTab("Stat Tracker")
local l = Window:NewTab("Local-Player")
local b = Window:NewTab("Blatant")
local t = Window:NewTab("TAS")
local k = Window:NewTab("Other")
local c = Window:NewTab("Credits")

local auto = a:NewSection("Auto")
local statTracker = s:NewSection("Stat Tracker")
local loc = l:NewSection("Local Player")
local blatant = b:NewSection("Blatant")
local tas = t:NewSection("TAS")
local other = k:NewSection("Other")
local credits = c:NewSection("Credits")

getgenv().wow = true

-- Coins Tracker
local players = game:GetService("Players")
local localPlayer = players.LocalPlayer
local playerGui = localPlayer.PlayerGui
local coinsAmount = playerGui.MenuGui.Shop.Currencies.Coins.Amount

local coinsLabel = statTracker:NewLabel("Coins Earned: 0")
local initialCoins = tonumber(coinsAmount.Text)

-- Gems Tracker
local gemsAmount = playerGui.MenuGui.Shop.Currencies.Gems.Amount

local gemsLabel = statTracker:NewLabel("Gems Earned: 0")
local initialGems = tonumber(gemsAmount.Text)

-- Level Tracker
local players = game:GetService("Players")
local levelLabel = statTracker:NewLabel("Level Earned: 0")
local playerLevels = {}

local function trackLevel(player)
    local levelPath = player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid:FindFirstChild("LvlText")
    if levelPath and levelPath:IsA("TextLabel") then
        local initialLevel = playerLevels[player]
        local currentLevel = levelPath.Text
        if initialLevel and currentLevel ~= initialLevel then
            local levelEarned = tonumber(currentLevel) - tonumber(initialLevel)
            levelLabel:UpdateLabel("Level Earned: " .. levelEarned)
        end
        playerLevels[player] = currentLevel
    end
end

local function trackAllLevels()
    for _, player in ipairs(players:GetPlayers()) do
        trackLevel(player)
    end
end

spawn(function()
    while wait(1) do
        trackAllLevels()
    end
end)

-- XP Tracker
local success, xpEarnedAmount = pcall(function()
    return playerGui.MenuGui.Goals.Window.Content.Pages.Stats.xpEarned.Amount
end)

local xpLabel = statTracker:NewLabel("XP Earned: 0")
local initialXP = tonumber(xpEarnedAmount.Text)

local coinsEvent = Instance.new("BindableEvent")
local gemsEvent = Instance.new("BindableEvent")
local xpEvent = Instance.new("BindableEvent")

coinsEvent.Event:Connect(function(coins)
    coinsLabel:UpdateLabel("Coins Earned: " .. coins)
end)

gemsEvent.Event:Connect(function(gems)
    gemsLabel:UpdateLabel("Gems Earned: " .. gems)
end)

xpEvent.Event:Connect(function(xp)
    xpLabel:UpdateLabel("XP Earned: " .. xp)
end)

local function trackCoins()
    local currentCoins = tonumber(coinsAmount.Text)
    if initialCoins then
        local coinsEarned = currentCoins - initialCoins
        coinsEvent:Fire(coinsEarned)
    else
        initialCoins = currentCoins
    end
end

local function trackGems()
    local currentGems = tonumber(gemsAmount.Text)
    if initialGems then
        local gemsEarned = currentGems - initialGems
        gemsEvent:Fire(gemsEarned)
    else
        initialGems = currentGems
    end
end

local function trackXP()
    if success and xpEarnedAmount then
        local currentXP = tonumber(xpEarnedAmount.Text)
        if initialXP then
            local xpEarned = currentXP - initialXP
            xpEvent:Fire(xpEarned)
        else
            initialXP = currentXP
        end
    end
end

spawn(function()
    while wait(1) do
        trackCoins()
        trackGems()
        trackXP()
    end
end)

local startTime = os.time()

local timerLabel = statTracker:NewLabel("Timer: 00:00:00")

spawn(function()
    while true do
        local currentTime = os.time() - startTime
        local hours = math.floor(currentTime / 3600)
        local minutes = math.floor((currentTime % 3600) / 60)
        local seconds = currentTime % 60
        local timeString = string.format("%02d:%02d:%02d", hours, minutes, seconds)
        timerLabel:UpdateLabel("Timer: " .. timeString)
        wait(1)
    end
end)

other:NewKeybind("ToggleUI", "Toggle UI with this keybind.", Enum.KeyCode.J, function()
    if getgenv().ui == true then
        clmain.newAlert("UI Disabled!", Color3.fromRGB(255, 0, 0))
        getgenv().ui = false
    else
        clmain.newAlert("UI Enabled!", Color3.fromRGB(0, 60, 255))
        getgenv().ui = true
    end
    Library:ToggleUI()
end)

other:NewLabel("Discord Invites")
other:NewButton("Copy Tomato-Hub Invite", "Copies Tomato-Hub invite to clipboard!", function()
	setclipboard("https://discord.gg/8N2M9fHJqa")
end)
other:NewButton("Copy Lexon-Hub Invite", "Copies Lexon-Hub invite to clipboard!", function()
	setclipboard("https://discord.gg/ng4CN7Vq")
end)
getgenv().ui = true
loc:NewSlider("Walkspeed", "Change your walkspeed!", 100, 20, function(t)
	game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = t
end)
loc:NewSlider("JumpPower", "Change your jumppower!", 200, 50, function(t)
	game.Players.LocalPlayer.Character.Humanoid.JumpPower = t
end)

loc:NewKeybind("Vip Emote", "Activates Vip emote!", Enum.KeyCode.V, function()
    local character = game:GetService("Players").LocalPlayer.Character
    local humanoid = character:WaitForChild("Humanoid")

    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://1584520816"

    local emoteAnimationTrack = humanoid:LoadAnimation(animation)

    game:GetService("UserInputService").InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.V then
            emoteAnimationTrack:Play()
            wait()
        end
        if input.KeyCode == Enum.KeyCode.W then
            emoteAnimationTrack:Stop()
            wait()
        end
        if input.KeyCode == Enum.KeyCode.A then
            emoteAnimationTrack:Stop()
            wait()
        end
        if input.KeyCode == Enum.KeyCode.S then
            emoteAnimationTrack:Stop()
            wait()
        end
        if input.KeyCode == Enum.KeyCode.D then
            emoteAnimationTrack:Stop()
            wait()
        end
    end)
end)

local save = getsenv(game:GetService("Players").LocalPlayer.PlayerScripts["CL_MAIN_GameScript"]).takeAir
getgenv().godmode = false
spawn(function()
	while wait(.04) do
		if getgenv().godmode == true then
			getsenv(game:GetService("Players").LocalPlayer.PlayerScripts["CL_MAIN_GameScript"]).takeAir = function()
				return 0
			end
		else
			getsenv(game:GetService("Players").LocalPlayer.PlayerScripts["CL_MAIN_GameScript"]).takeAir = save
		end
	end
end)
blatant:NewKeybind("Infinite Air", "Infinite Air/God Mode", Enum.KeyCode.R, function()
	if getgenv().godmode ~= false then
		clmain.newAlert("Infinite Air Disabled!", Color3.fromRGB(255, 0, 0))
		getgenv().godmode = false
	else
		clmain.newAlert("Infinite Air Enabled!", Color3.fromRGB(0, 255, 0))
		getgenv().godmode = true
	end
end)

local lp = game:GetService("Players").LocalPlayer
local noclipEnabled = false

game:GetService("RunService").Stepped:Connect(function()
    if noclipEnabled and lp.Character then
        for _, part in pairs(lp.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end
end)

blatant:NewKeybind("Noclip", "Walk through some walls!", Enum.KeyCode.G, function()
    noclipEnabled = not noclipEnabled
    if noclipEnabled then
        clmain.newAlert("Noclip Enabled!", Color3.fromRGB(0, 255, 0))
    else
        clmain.newAlert("Noclip Disabled!", Color3.fromRGB(255, 0, 0))
    end
end)

blatant:NewButton("Lag Server", "Equip buddy then press", function()
	local key = -game:GetService("ReplicatedStorage").Remote.ReqPasskey:InvokeServer()
	for i = 1, 190, 1 do
		game:GetService("ReplicatedStorage").Remote.ConfirmItem:FireServer(key, 40)
	end
end)

local infJumpEnabled = false

blatant:NewToggle("Infinite Jump", "Jump while freefalling!", function()
    infJumpEnabled = not infJumpEnabled
end)

blatant:NewToggle("Teleport on Ctrl+Click ⚠️", "Toggle teleport on Ctrl+Click", function(toggled)
    TeleportEnabled = toggled
end)

local UIS = game:GetService("UserInputService")
local Player = game.Players.LocalPlayer
local Mouse = Player:GetMouse()

function GetCharacter()
    return game.Players.LocalPlayer.Character
end

function Teleport(pos)
    local Char = GetCharacter()
    if Char then
        Char:MoveTo(pos)
    end
end

local function InputHandler(input)
    if TeleportEnabled and input.UserInputType == Enum.UserInputType.MouseButton1 and UIS:IsKeyDown(Enum.KeyCode.LeftControl) then
        Teleport(Mouse.Hit.p)
    end
end

UIS.InputBegan:Connect(InputHandler)

local camera = game.Workspace.CurrentCamera
local targetPosition = Vector3.new(-25.5, -144.3449249267578, 138.50001525878906)
local play = false
local useCamera = false

local camera = game.Workspace.CurrentCamera

-- Define the target position
local targetPosition = Vector3.new(-25.5, -144.3449249267578, 138.50001525878906)

auto:NewToggle("Auto-Play [Working]", "Will auto-play maps with a TAS! (Requires TAS files)", function(t)
	getgenv().play = t
end)
getgenv().play = false
task.spawn(function()
		while task.wait(0.5) do
			local S,r = pcall(function()
				if getgenv().play ~= false then
					loadstring(game:HttpGet("https://raw.githubusercontent.com/Swelllow/Testing/main/Flood-GUI-main/TAS/TAS%20Player"))
					"TAS Player Fixed & Optimized By Tomato with help from Epix, Moz and Voiz"
				end
			end)
			if S ~= true then
				print(r)
			end
		end
end)

local player = game.Players.LocalPlayer
local character = player.Character
local camera = workspace.CurrentCamera

getgenv().camera = false

task.spawn(function()
    while task.wait() do
        if getgenv().camera then
            local newLookVector = (targetPosition - camera.CFrame.p).Unit
            camera.CFrame = CFrame.new(camera.CFrame.p, camera.CFrame.p + newLookVector)
        end
    end
end)

auto:NewToggle("Camera", "Constantly looks at elevator!", function()
    getgenv().camera = not getgenv().camera
end)

local autoWalkEnabled = false

local function autoWalk()
    while autoWalkEnabled do
        local character = player.Character
        if character and character:FindFirstChild("Humanoid") then
            local direction = camera.CFrame.lookVector
            local targetPos = character.HumanoidRootPart.Position + direction * 2
            character.Humanoid:MoveTo(targetPos)
        end
        wait()
    end
end

auto:NewToggle("Auto-Walk", "Will automatically walk forward for you!", function()
    autoWalkEnabled = not autoWalkEnabled
    if autoWalkEnabled then
        spawn(autoWalk)
    end
end)

player.CharacterAdded:Connect(function(character)
    autoWalk()
end)

getgenv().play = false
getgenv().infjump = false
getgenv().oof = false

local vuEnabled = false

local VirtualUser = game:GetService("VirtualUser")

auto:NewToggle("Anti-Afk", "Prevents AFK kick", function(t) --Made by Moz
    if t then
        game:GetService("Players").LocalPlayer.Idled:connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end)
    end
end)

local autoPlayEnabled = false

--Auto Rescue and Lost Page

local player = game.Players.LocalPlayer
local autoTeleportEnabled = false

local function autoTeleport()
    while autoTeleportEnabled do
        local character = player.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local destination = game.Workspace:FindFirstChild("Multiplayer")
            if destination then
                destination = destination:FindFirstChild("Map")
                if destination then
                    destination = destination:FindFirstChild("_Rescue")
                    if destination then
                        local contactPart = destination:FindFirstChild("Contact")
                        if contactPart and contactPart:IsA("BasePart") then
                            local humanoidRootPart = character.HumanoidRootPart
                            humanoidRootPart.CFrame = contactPart.CFrame
                        end
                    end
                end
            end
        end
        wait()
    end
end

auto:NewToggle("Auto-Rescues", "Automatically gets Rescues!", function(toggleState)
    autoTeleportEnabled = toggleState
    if autoTeleportEnabled then
        spawn(autoTeleport)
    end
end)


local player = game.Players.LocalPlayer
local autoTeleportEnabled = false

local function autoTeleport()
    while autoTeleportEnabled do
        local character = player.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local destination = game.Workspace:FindFirstChild("Multiplayer")
            if destination then
                destination = destination:FindFirstChild("Map")
                if destination then
                    destination = destination:FindFirstChild("_LostPage")
                    if destination then
                        local humanoidRootPart = character.HumanoidRootPart
                        humanoidRootPart.CFrame = destination.CFrame
                    end
                end
            end
        end
        wait()
    end
end

auto:NewToggle("Auto-Lost Pages", "Automatically gets Lost Pages!", function(toggleState)
    autoTeleportEnabled = toggleState
    if autoTeleportEnabled then
        spawn(autoTeleport)
    end
end)

--End of Auto Rescue and Lost Page

loc:NewToggle("Anti-Fog", "Will automatically remove the fog!", function(t)
    autoPlayEnabled = t
    while autoPlayEnabled do
        game.Lighting.FogEnd = 100000
        game.Lighting.FogStart = 0
        game.Lighting.ClockTime = 14
        game.Lighting.Brightness = 2
        game.Lighting.GlobalShadows = false
        wait(1) -- Wait for one second before running the loop again
    end
end)

loc:NewToggle("Low-Detail", "Extreme low-detail for farming (Permanent).", function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Swelllow/Testing/main/Low%20Detail"))()
end)


game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
    if infJumpEnabled and not gameProcessedEvent then
        if input.KeyCode == Enum.KeyCode.Space then
            lp.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

--auto:NewToggle("Auto-Vote", "Automatically votes! (Will spend coins)", function(t)
	--getgenv().oof = t
--end)

auto:NewButton("Get TAS files", "Downloads TAS files!", function()
    print("Starting downloads..")
    for i, v in pairs(maps) do
        print("-------------------------------------------------")
        local map = string.gsub(v, " ", "%%20")
        local su = false -- isfile(v..".json")
        if su == true then
            clmain.newAlert(v.." TAS file already exists!",Color3.fromRGB(50,100,255))
        else
            local s, r = pcall(function()
                local tas = game:HttpGet("https://raw.githubusercontent.com/Swelllow/Testing/main/Flood-GUI-main/TAS%20FILES/"..map..".json")
                writefile(v..".json", minfile(tas),true)
            end)
            if s then
                clmain.newAlert("Downloaded "..v.." TAS file succesfully!",Color3.fromRGB(0,255,0))
            else
                clmain.newAlert("Failed to download "..v.." TAS file. :(",Color3.fromRGB(255,0,0))
            end
        end
        task.wait()
    end
    clmain.newAlert("Finished Downloading TAS files")
end)

tas:NewButton("Create-TAS for CM", "Create a TAS for CM, Press then enter lift.", function()
    game.Workspace.DescendantAdded:Connect(function(child)
        if child.ClassName == "Sound" then
            child:Destroy()
        end
    end)

    local Fix = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Swelllow/Testing/main/Flood-GUI-main/TAS/TAS%20Recorder%20for%20CM", true))()
    end

    local ButtonStuff = function()
        while not game.Workspace:FindFirstChild("Map") do
            wait()
        end
        
        local Map = game.Workspace.Map
        for i, v in pairs(Map:GetDescendants()) do
            if v:IsA("Part") and v.Size == Vector3.new(3, 1, 3) then
                v.Size = v.Size * 1.8
                v.Color = Color3.fromRGB(255, 140, 0)
                local selectbox = Instance.new("SelectionBox", v)
                selectbox.Adornee = v
                selectbox.Color3 = Color3.fromRGB(255, 140, 0)
                getgenv().delayy = false
                v.Touched:Connect(function(part)
                    if not delayy then
                        clmain.newAlert("Button Touched!", Color3.fromRGB(255, 140, 0))
                        delayy = true
                        wait(1)
                        delayy = false
                    end
                end)
            end
        end
    end

    Fix()
    spawn(ButtonStuff) -- Use spawn() to run the function asynchronously
end)

tas:NewButton("Run-TAS For CM", "For CM only!", function()
	loadstring(game:HttpGet('https://raw.githubusercontent.com/Swelllow/Testing/main/Flood-GUI-main/TAS/TAS%20Player%20for%20CM'))
	"TAS Player Fixed By Tomato with help of Moz"
end)

tas:NewButton("Create-TAS", "Create a TAS, Press then enter lift.", function()
    game.Workspace.DescendantAdded:Connect(function(child)
        if child.ClassName == "Sound" then
            child:Destroy()
        end
    end)

    local Fix = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Swelllow/Testing/main/Flood-GUI-main/TAS/TAS%20Record%20Fix", true))()
    end

    local ButtonStuff = function()
        while not game.Workspace:FindFirstChild("Map") do
            wait()
        end
        
        local Map = game.Workspace.Map
        for i, v in pairs(Map:GetDescendants()) do
            if v:IsA("Part") and v.Size == Vector3.new(1, 1,1) then
                v.Size = v.Size * 1.8
                v.Color = Color3.fromRGB(255, 140, 0)
                local selectbox = Instance.new("SelectionBox", v)
                selectbox.Adornee = v
                selectbox.Color3 = Color3.fromRGB(255, 140, 0)
                getgenv().delayy = false
                v.Touched:Connect(function(part)
                    if not delayy then
                        clmain.newAlert("Button Touched!", Color3.fromRGB(255, 140, 0))
                        delayy = true
                        wait(1)
                        delayy = false
                    end
                end)
            end
        end
    end

    Fix()
    spawn(ButtonStuff) -- Use spawn() to run the function asynchronously
end)



local oldindex
oldindex = hookmetamethod(game, "__index", function(self, b)
	if tostring(self) == "HumanoidRootPart" and b == "Position" and not checkcaller() then
		if getgenv().swim == true then
			return Vector3.new(-23, -153, 0) -- position of lobby water
		else
			return oldindex(self, b) -- normal player position
		end
	end
	return oldindex(self, b)
end)
tas:NewKeybind("Toggle Swim", "Only works while creating TAS.", Enum.KeyCode.T, function()
	if getgenv().swim == true then
		getgenv().swim = false
	else
		getgenv().swim = true
	end
end)
tas:NewButton("Remove Water (TAS)", "Removes water in tas creator", function()
    for i,v in pairs(game.Workspace:GetDescendants()) do
        if string.match(string.lower(v.Name),"water") then
            v:Destroy()
        end
    end
end)
tas:NewToggle("Auto-Leave", "Automatically leaves when player joins!", function(t)
	getgenv().autoleave = t
end)
credits:NewLabel("New Anti-Kick by AltLexon#6917")
credits:NewLabel("TAS script by Voiz#5668 and Moz")
credits:NewLabel("TAS File Minifier by iaan#8193")
credits:NewLabel("Tas Player by Tomato and Moz")
credits:NewLabel("CM support and other small things by Moz")
credits:NewLabel("Everything else by Tomato")
wait()
if debugmode == true then
	clmain.newAlert("Flood GUI v3 loaded in Debug Mode!",Color3.new(0,0,1))
else
	clmain.newAlert("Flood GUI v3 Loaded!",nil,nil,"rainbow")
end
local oldwrite; oldwrite = hookfunction(writefile,function(name,data,bypass)
    if bypass ~= true then
        local Mn = string.gsub(name,'.json','')
        if table.find(maps,Mn) then
            clmain.newAlert("Saved "..Mn.." TAS file!",nil,nil,"rainbow")
            return oldwrite(name,minfile(data))
        end
    end
    return oldwrite(name,data)
end)


--resets character to fix lag bug wow
game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Health = 0
