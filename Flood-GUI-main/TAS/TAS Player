local Mirrored = false
local NewV = Vector3.new
local NewC = CFrame.new
local AngC = CFrame.fromEulerAnglesXYZ
local LP = game.Players.LocalPlayer
local Alert = getsenv(LP.PlayerScripts.CL_MAIN_GameScript).newAlert
local Multi = Workspace.Multiplayer
local RS = game:GetService('RunService')
local wait = task.wait

--IMPORTANT
local CLMAIN = getsenv(LP.PlayerScripts.CL_MAIN_GameScript)
if not tasplayeractive then
	CLMAIN.newAlert("TAS Player Started!")
else
	CLMAIN.newAlert("Ready for next map!")
end
getgenv().tasplayeractive = true


local MapSettings = Multi:WaitForChild('NewMap'):WaitForChild('Settings')
local RunName = MapSettings:WaitForChild('MapName').Value
local TAS
if isfile(RunName .. ".json") then
	TAS = game:GetService("HttpService"):JSONDecode(readfile(RunName .. ".json"))
	local Animate = getsenv(LP.Character.Animate)
	
	CLMAIN.newAlert("TAS Loaded!")
	local Map = Multi:WaitForChild("Map")
	
	local Spawn = (function() -- new spawn finder by "_tomato." on discord
	    local Spawn = nil
	
	    local connections = {}
	    for i,v in ipairs(Map:GetChildren()) do
	        if v.Name == "Part" then
	            table.insert(connections, v:GetPropertyChangedSignal("Rotation"):Connect(function()
	                Spawn = v
	                for i,v in ipairs(connections) do
	                    v:Disconnect()
	                end
	            end))
	        end
	    end
	    repeat task.wait() until Spawn
	    CLMAIN.newAlert("Spawn found!")
	    return Spawn
	end)()
	
	if not Map:WaitForChild('Settings'):WaitForChild("_MirrorMap", 5) and Map:WaitForChild('Settings'):FindFirstChild("FE2_ID") then
	    CLMAIN.newAlert('Map is mirrored, TAS will be played mirrored!')
	    Mirrored = true
	else
	    CLMAIN.newAlert('Map is not Mirrored.')
	    Mirrored = false
	end
	
	LP.Character.HumanoidRootPart.CFrame = NewC(TAS[3].CCFrame[1], TAS[3].CCFrame[2], TAS[3].CCFrame[3]) * AngC(TAS[3].CCFrame[4], TAS[3].CCFrame[5], TAS[3].CCFrame[6]) + NewV(Spawn.Position.X, Spawn.Position.Y - 1000, Spawn.Position.Z)
	LP.Character.HumanoidRootPart.Velocity = NewV(TAS[3].VVelocity[1], TAS[3].VVelocity[2], TAS[3].VVelocity[3])
	Workspace.CurrentCamera.CFrame = NewC(TAS[3].CCameraCFrame[1], TAS[3].CCameraCFrame[2], TAS[3].CCameraCFrame[3]) * AngC(TAS[3].CCameraCFrame[4], TAS[3].CCameraCFrame[5], TAS[3].CCameraCFrame[6]) + NewV(Spawn.Position.X, Spawn.Position.Y - 1000, Spawn.Position.Z)
	
	game:GetService("ReplicatedStorage").Remote.StartClientMapTimer.OnClientEvent:Wait()
	local TimeStart = os.clock()
	CLMAIN.newAlert('TAS Running..')
	PlayAnim = Animate.playAnimation
	Animate.playAnimation = function()end
	
	for _, v in next, Map:GetDescendants() do
	    if v.Name == 'ButtonIcon' then
	        local buttonPart = v.Parent.Parent:FindFirstChildOfClass('Part')
	        if buttonPart ~= nil then
	            buttonPart.Size = Vector3.new(6,6,6)
	        end
	    end
	end
	
	local Offset = Spawn.Position - NewV(0, 1000, 0)
	local DiffAnim = 0
	local OldFrame = 3
	
	local Loop
	local Death
	Death = LP.Character.Humanoid.Changed:Connect(function(Change)
	    if Change == "Health" and LP.Character.Humanoid.Health == 0 then
	        Death:Disconnect()
	        Loop:Disconnect()
	        Animate.playAnimation = PlayAnim
	        CLMAIN.newAlert('Player Died.',Color3.new(1,0,0))
	    end
	end)
	Loop = RS.Heartbeat:connect(function(DeltaTime)
	    local NewFrame = #TAS
	    local Divider = OldFrame + 60
	    if Divider < NewFrame then
	        NewFrame = Divider
	    end
	    for i = OldFrame, NewFrame do
	        if (os.clock() - TimeStart) < TAS[i].time then
	            break
	        elseif i >= #TAS then
	            Death:Disconnect()
	            Loop:Disconnect()
	            Animate.playAnimation = PlayAnim
	            CLMAIN.newAlert('TAS Run Finished!',Color3.new(0,1,0))
	            CLMAIN.newAlert('TAS Player By Tomato',Color3.new(0,1,0))
	        elseif (os.clock() - TimeStart) >= TAS[i].time then
	            OldFrame = i
	            local CF = TAS[i].CCFrame
	            local CCF = TAS[i].CCameraCFrame
	            local VV = TAS[i].VVelocity
	            local CA = TAS[i].AAnimation
	            if Mirrored == true then
			    CF[3] = -CF[3]
			    VV[1] = -VV[1]
	    		    VV[3] = -VV[3]
	            end
	            LP.Character.HumanoidRootPart.CFrame = NewC(CF[1], CF[2], CF[3]) * AngC(CF[4], CF[5], CF[6]) + Offset
	            LP.Character.HumanoidRootPart.Velocity = NewV(VV[1], VV[2], VV[3])
	            --Workspace.CurrentCamera.CFrame = NewC(CCF[1], CCF[2], CCF[3]) * AngC(CCF[4], CCF[5], CCF[6]) + Offset
	            if TAS[i].AAnimation ~= TAS[i-1].AAnimation then --TAS[i].AAnimation and TAS[i].AAnimationChanged and TAS[i].AAnimationChanged > DiffAnim
	                if CA[1] == "walk" then
	                    PlayAnim(CA[1], CA[2], LP.Character.Humanoid)
	                    DiffAnim = TAS[i].AAnimationChanged
	                    --Animate.setAnimationSpeed(0.76)
	                else
	                    PlayAnim(CA[1], CA[2], LP.Character.Humanoid)
	                    --DiffAnim = TAS[i].AAnimationChanged
	                end
	            end
	        end
	    end
	end)
    else
      LP.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Dead)
    end

-- Fixed by Moz
