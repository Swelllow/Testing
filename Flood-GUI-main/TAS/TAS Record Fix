-- TAS Recorder Fix

print("Started!!!!!1")

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = game.Players.LocalPlayer
local Alert = getsenv(game.Players.LocalPlayer.PlayerScripts.CL_MAIN_GameScript).newAlert
local Key = -game.ReplicatedStorage.Remote.ReqPasskey:InvokeServer()
local AnimationState = {}
local Savestates = {}
local PlayerInfo = {}
local TimePaused = 0
local Pause = true
local TimePauseHolder
local SenvAnimation
local PlayAnimation
local TimeStart
local TimeText
local MapDuplicated = false

local function ReturnPlayerInfo()
    return {
        CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame,
        CameraCFrame = workspace.CurrentCamera.CFrame,
        Velocity = LocalPlayer.Character.HumanoidRootPart.Velocity,
        Animation = AnimationState,
        Time = tick() - TimeStart - TimePaused,
    }
end

local function SetPrimaryPart()
    local Map = game.Workspace.Multiplayer:WaitForChild("Map")
    local Spawn = nil
    local connections = {}

    for i, v in ipairs(Map:GetChildren()) do
        if v.Name == "Part" then
            table.insert(connections, v:GetPropertyChangedSignal("Rotation"):Connect(function()
                Spawn = v
                for i, v in ipairs(connections) do
                    v:Disconnect()
                end
            end))
        end
    end

    repeat
        task.wait()
    until Spawn

    Map.PrimaryPart = Spawn
end

local function SetUpGui()
    for i, v in pairs(LocalPlayer.PlayerGui.GameGui.HUD.Main.GameStats:GetChildren()) do
        if v:IsA("Frame") then
            v.Visible = false
        end
    end

    TimeText = Instance.new("TextLabel")
    TimeText.Name = "TimeText"
    TimeText.Parent = LocalPlayer.PlayerGui.GameGui.HUD.Main.GameStats
    TimeText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TimeText.BackgroundTransparency = 1.000
    TimeText.Position = UDim2.new(0.030, 0, 0.35, 0)
    TimeText.Size = UDim2.new(0, 100, 0, 27)
    TimeText.Font = Enum.Font.Highway
    TimeText.Text = "0:00:000"
    TimeText.TextColor3 = Color3.fromRGB(255, 255, 0)
    TimeText.TextSize = 60
    TimeText.TextXAlignment = Enum.TextXAlignment.Left

    LocalPlayer.PlayerGui.GameGui.Challenges.Visible = false
end

local function SetUpMap()
    local function OnMapDuplicated()
        MapDuplicated = true
    end

    local function OnCharacterAdded(character)
        character:WaitForChild("Humanoid")
        character:WaitForChild("HumanoidRootPart")
        ReplicatedStorage.Remote.RemoveWaiting:FireServer(Key)
        character.Humanoid.WalkSpeed = 0
        character.Humanoid.JumpPower = 0
        task.wait(0.5)
        character.Humanoid.WalkSpeed = 0
        character.Humanoid.JumpPower = 0
        character.HumanoidRootPart.CFrame = CFrame.new(Map.PrimaryPart.Position) + Vector3.new(0, Map.PrimaryPart.Size.Y / 2, 0)
        character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
        character.HumanoidRootPart.RotVelocity = Vector3.new(0, 0, 0)
        character.HumanoidRootPart.Orientation = Vector3.new(0, 0, 0)
        character.Humanoid.PlatformStand = true
        ReplicatedStorage.Remote.AddWaiting:FireServer(Key)
        character.Humanoid.PlatformStand = false
        character.HumanoidRootPart.CFrame = CFrame.new(Map.PrimaryPart.Position) + Vector3.new(0, 3, 0)
    end

    local function OnPlayerRespawn()
        if not MapDuplicated then
            OnMapDuplicated()
        end

        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        OnCharacterAdded(character)
    end

    LocalPlayer.CharacterAdded:Connect(OnCharacterAdded)
    LocalPlayer.CharacterAdded:Connect(function(character)
        character:WaitForChild("Humanoid")
        character.Humanoid.Died:Connect(OnPlayerRespawn)
    end)

    if LocalPlayer.Character then
        OnCharacterAdded(LocalPlayer.Character)
    end

    LocalPlayer.CharacterAdded:Connect(OnPlayerRespawn)
end

local function SaveState()
    table.insert(Savestates, ReturnPlayerInfo())
end

local function RestoreState(index)
    local state = Savestates[index]
    if state then
        LocalPlayer.Character.HumanoidRootPart.CFrame = state.CFrame
        workspace.CurrentCamera.CFrame = state.CameraCFrame
        LocalPlayer.Character.HumanoidRootPart.Velocity = state.Velocity
        AnimationState = state.Animation
        TimePaused = state.Time
    end
end

local function PauseTAS()
    if not Pause then
        PlayAnimation = false
        task.wait()
        SenvAnimation = AnimationState
        AnimationState = {}
        SaveState()
        TimePauseHolder = tick()
        Pause = true
        PlayAnimation = true
    end
end

local function PlayTAS()
    if Pause then
        PlayAnimation = false
        task.wait()
        Pause = false
        TimePaused = TimePaused + (tick() - TimePauseHolder)
        RestoreState(#Savestates)
        table.remove(Savestates)
        AnimationState = SenvAnimation
        PlayAnimation = true
    end
end

local function SaveRun()
    local fileName = "TAS_Run_" .. os.date("%Y-%m-%d_%H-%M-%S") .. ".txt"
    local file = io.open(fileName, "w")

    if file then
        file:write("TAS Run Data\n")
        file:write("---------------\n")
        file:write("Time, X, Y, Z, VX, VY, VZ\n")

        for _, state in ipairs(AnimationState) do
            local time = string.format("%.3f", state.Time)
            local cframe = state.CFrame
            local position = cframe.Position
            local velocity = state.Velocity

            local x = string.format("%.2f", position.X)
            local y = string.format("%.2f", position.Y)
            local z = string.format("%.2f", position.Z)

            local vx = string.format("%.2f", velocity.X)
            local vy = string.format("%.2f", velocity.Y)
            local vz = string.format("%.2f", velocity.Z)

            file:write(time .. ", " .. x .. ", " .. y .. ", " .. z .. ", " .. vx .. ", " .. vy .. ", " .. vz .. "\n")
        end

        file:close()
        print("TAS Run saved as '" .. fileName .. "'")
    else
        warn("Failed to create TAS Run file.")
    end
end

local function CollisionToggler()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        local humanoid = LocalPlayer.Character.Humanoid
        humanoid:ChangeState(Enum.HumanoidStateType.Physics)
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
        humanoid:ChangeState(Enum.HumanoidStateType.FallingDown)
        humanoid:ChangeState(Enum.HumanoidStateType.Landed)
    end
end

local function UserPause()
    if not Pause then
        PauseTAS()
    else
        PlayTAS()
    end
end

local function AddSavestate()
    SaveState()
    Alert("Added Savestate!")
end

local function RemoveSavestate()
    local state = table.remove(Savestates)
    if state then
        Alert("Removed Savestate!")
    else
        Alert("No Savestates to remove!")
    end
end

local function BackSavestate()
    if #Savestates > 0 then
        RestoreState(#Savestates)
        table.remove(Savestates)
        Alert("Returned to previous Savestate!")
    else
        Alert("No Savestates to return to!")
    end
end

SetPrimaryPart()
SetUpGui()
SetUpMap()

RunService.RenderStepped:Connect(function()
    if PlayAnimation then
        table.insert(AnimationState, ReturnPlayerInfo())
        local time = AnimationState[#AnimationState].Time
        local minutes = math.floor(time / 60)
        local seconds = math.floor(time % 60)
        local milliseconds = math.floor((time % 1) * 1000)
        TimeText.Text = string.format("%d:%02d:%03d", minutes, seconds, milliseconds)
    end
end)

UserInputService.InputBegan:Connect(function(input, isTyping)
    if not isTyping then
        local keyCode = input.KeyCode.Name
        if keyCode == "CapsLock" then
            UserPause()
        elseif keyCode == "One" then
            AddSavestate()
        elseif keyCode == "Two" then
            RemoveSavestate()
        elseif keyCode == "Three" then
            BackSavestate()
        elseif keyCode == "Four" then
            CollisionToggler()
        elseif keyCode == "Five" then
            SaveRun()
        end
    end
end)
