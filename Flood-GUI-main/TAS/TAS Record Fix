local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = game.Players.LocalPlayer
local Alert = getsenv(game.Players.LocalPlayer.PlayerScripts.CL_MAIN_GameScript).newAlert
local Key = -game.ReplicatedStorage.Remote.ReqPasskey:InvokeServer()
local AnimationState = {}
local Savestates = {}
local PlayerInfo = {}
local TimePaused = 0
local Pause = true
local TimePauseHolder
local SenvAnimation
local PlayAnimation
local TimeStart
local TimeText

local function ReturnPlayerInfo()
    return {
        CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame,
        CameraCFrame = workspace.CurrentCamera.CFrame,
        Velocity = LocalPlayer.Character.HumanoidRootPart.Velocity,
        Animation = AnimationState,
        Time = tick() - TimeStart - TimePaused
    }
end

local function SetPrimaryPart()
    local CharacterParts = {}
    local Character = LocalPlayer.Character
    local Ray = Ray.new(Character.HumanoidRootPart.Position, Vector3.new(0, -10, 0))

    if workspace.CurrentCamera:FindFirstChild("ShadowPt") then
        table.insert(CharacterParts, workspace.CurrentCamera.ShadowPt)
    end

    for _, player in ipairs(game.Players:GetPlayers()) do
        pcall(function()
            for _, part in ipairs(player.Character:GetChildren()) do
                if part:IsA("Part") then
                    table.insert(CharacterParts, part)
                end
            end
        end)
    end

    while true do
        local hit, pos = workspace:FindPartOnRayWithIgnoreList(Ray, CharacterParts)

        if hit:IsA("Part") and math.floor(hit.Size.X) == math.floor(hit.Size.Z) then
            workspace.Multiplayer.Map.PrimaryPart = hit
            break
        else
            table.insert(CharacterParts, hit)
        end
    end
end

local function SetUpGui()
    for _, frame in ipairs(LocalPlayer.PlayerGui.GameGui.HUD.Main.GameStats:GetChildren()) do
        if frame:IsA("Frame") then
            frame.Visible = false
        end
    end

    TimeText = Instance.new("TextLabel")
    TimeText.Name = "TimeText"
    TimeText.Parent = LocalPlayer.PlayerGui.GameGui.HUD.Main.GameStats
    TimeText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TimeText.BackgroundTransparency = 1.000
    TimeText.Position = UDim2.new(0.030, 0, 0.35, 0)
    TimeText.Size = UDim2.new(0, 100, 0, 27)
    TimeText.Font = Enum.Font.Highway
    TimeText.Text = "0:00:000"
    TimeText.TextColor3 = Color3.fromRGB(255, 255, 0)
    TimeText.TextSize = 60
    TimeText.TextXAlignment = Enum.TextXAlignment.Left

    LocalPlayer.PlayerGui.GameGui.Challenges.Visible = false
end

local function SetUpMap()
    local Map

    function game.ReplicatedStorage.Remote.ReqCharVars.OnClientInvoke()
        return {}
    end

    SetPrimaryPart()
    Map = game.Workspace.Multiplayer.Map:Clone()
    Map.Parent = game.Workspace
    Map:MoveTo(Vector3.new(0, 1000, 0))

    LocalPlayer.Character:Destroy()

    return Map
end

local function Wait()
    LocalPlayer.CharacterAdded:Wait()

    SetUpGui()

    Map = SetUpMap()

    wait(7) -- Delay to ensure map loading

    Map:MoveTo(Vector3.new(0, 0, 0))
    workspace.CurrentCamera.CameraType = Enum.CameraType.Custom

    repeat
        RunService.RenderStepped:Wait()
    until workspace.CurrentCamera.CameraType == Enum.CameraType.Scriptable

    return Map
end

local function DuplicateMap()
    local Map = Wait()

    for _, part in ipairs(Map:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Transparency = 1
            part.CanCollide = false
        end
    end

    for _, decal in ipairs(Map:GetDescendants()) do
        if decal:IsA("Decal") then
            decal.Transparency = 1
        end
    end

    Map.PrimaryPart.Transparency = 1

    return Map
end

local function VerifyDuplication(Map)
    local function CheckDuplication()
        for _, part in ipairs(Map:GetDescendants()) do
            if part:IsA("BasePart") and part.Transparency == 1 then
                return true
            end
        end
        return false
    end

    local maxAttempts = 5 -- Maximum number of attempts to verify duplication
    local attemptCount = 0

    repeat
        wait(1) -- Wait for a second before checking duplication
        attemptCount = attemptCount + 1
    until CheckDuplication() or attemptCount >= maxAttempts

    if not CheckDuplication() then
        error("Map duplication failed after multiple attempts.")
    end
end

local function HandleError(errorMessage)
    print("Error:", errorMessage)
    Alert({{Text = "Error: " .. errorMessage, Duration = 5}})
end

local function CreateTAS()
    local success, errorMessage = pcall(function()
        Map = DuplicateMap()
        VerifyDuplication(Map)
        -- Perform additional actions or logic after successful duplication if needed
    end)

    if not success then
        HandleError(errorMessage)
    end
end

UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Delete and input.UserInputType == Enum.UserInputType.Keyboard then
        CreateTAS()
    end
end)

local function SaveRun()
    if Pause then
        SenvAnimation = getsenv(LocalPlayer.PlayerScripts.CL_MAIN_GameScript).animation
        SenvAnimation.Time1.Size = Vector3.new(1.5, 1.5, 1.5)
        SenvAnimation.UpdateSize(1)
        SenvAnimation.SaveState()
        table.insert(Savestates, ReturnPlayerInfo())
        table.insert(AnimationState, SenvAnimation.Finished.Value)
        SenvAnimation.Finished.Value = false
        table.insert(PlayerInfo, LocalPlayer.Character.Humanoid.WalkSpeed)
        table.insert(PlayerInfo, LocalPlayer.Character.Humanoid.JumpPower)
    end
end

local function UserPause()
    if Pause then
        SenvAnimation = getsenv(LocalPlayer.PlayerScripts.CL_MAIN_GameScript).animation
        TimePauseHolder = tick()
        TimeStart = tick() - TimePaused
        TimePaused = tick() - TimeStart
        Pause = false
        SenvAnimation.IsPaused.Value = true
        SenvAnimation.Pause()
        SenvAnimation.Time1.Transparency = 0.5
        SenvAnimation.Time2.Transparency = 0.5
        SenvAnimation.Time1.Size = Vector3.new(3, 3, 3)
        SenvAnimation.Time2.Size = Vector3.new(3, 3, 3)
        SenvAnimation.UpdateSize(1)
        TimeText.Visible = true
        TimeText.Position = UDim2.new(0.030, 0, 0.35, 0)
        TimeText.Size = UDim2.new(0, 100, 0, 27)
        TimeText.Font = Enum.Font.Highway
        TimeText.TextColor3 = Color3.fromRGB(255, 255, 0)
        TimeText.TextSize = 60
        TimeText.TextXAlignment = Enum.TextXAlignment.Left
    else
        SenvAnimation = getsenv(LocalPlayer.PlayerScripts.CL_MAIN_GameScript).animation
        TimePaused = TimePaused + (tick() - TimePauseHolder)
        Pause = true
        SenvAnimation.IsPaused.Value = false
        SenvAnimation.Pause()
        SenvAnimation.Time1.Transparency = 1
        SenvAnimation.Time2.Transparency = 1
        TimeText.Visible = false
    end
end

local function AddSavestate()
    if Pause then
        table.insert(Savestates, ReturnPlayerInfo())
        SenvAnimation = getsenv(LocalPlayer.PlayerScripts.CL_MAIN_GameScript).animation
        table.insert(AnimationState, SenvAnimation.Finished.Value)
        SenvAnimation.Finished.Value = false
        table.insert(PlayerInfo, LocalPlayer.Character.Humanoid.WalkSpeed)
        table.insert(PlayerInfo, LocalPlayer.Character.Humanoid.JumpPower)
    end
end

local function RemoveSavestate()
    if Pause and #Savestates > 0 then
        table.remove(Savestates)
        table.remove(AnimationState)
        table.remove(PlayerInfo)
        table.remove(PlayerInfo)
    end
end

local function BackSavestate()
    if Pause and #Savestates > 0 then
        table.remove(Savestates)
        table.remove(AnimationState)
        table.remove(PlayerInfo)
        table.remove(PlayerInfo)
        SenvAnimation = getsenv(LocalPlayer.PlayerScripts.CL_MAIN_GameScript).animation
        SenvAnimation.Finished.Value = AnimationState[#AnimationState]
        LocalPlayer.Character.Humanoid.WalkSpeed = PlayerInfo[#PlayerInfo - 1]
        LocalPlayer.Character.Humanoid.JumpPower = PlayerInfo[#PlayerInfo]
    end
end

local function CollisionToggler()
    for _, part in ipairs(game:GetService("Workspace").Multiplayer.Map:GetDescendants()) do
        if part:IsA("BasePart") and not part.Anchored then
            part.CanCollide = not part.CanCollide
        end
    end
end

UserInputService.InputBegan:Connect(function(key, typing)
    if not typing then
        key = key.KeyCode.Name
        if key == "CapsLock" then
            UserPause()
        elseif key == "One" then
            AddSavestate()
        elseif key == "Two" then
            RemoveSavestate()
        elseif key == "Three" then
            BackSavestate()
        elseif key == "Four" then
            CollisionToggler()
        elseif key == "Five" then
            SaveRun()
        end
    end
end)
